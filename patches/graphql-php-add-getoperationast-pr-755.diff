diff --git a/src/Utils/AST.php b/src/Utils/AST.php
index d4cf6a98..5b5e2d5d 100644
--- a/src/Utils/AST.php
+++ b/src/Utils/AST.php
@@ -584,6 +584,8 @@ public static function typeFromAST(Schema $schema, $inputTypeNode)
     }
 
     /**
+     * @deprecated use getOperationAST instead.
+     *
      * Returns operation type ("query", "mutation" or "subscription") given a document and operation name
      *
      * @param string $operationName
@@ -608,4 +610,33 @@ public static function getOperation(DocumentNode $document, $operationName = nul
 
         return false;
     }
+
+    /**
+     * Returns the operation within a document by name.
+     *
+     * If a name is not provided, an operation is only returned if the document has exactly one.
+     *
+     * @api
+     */
+    public static function getOperationAST(DocumentNode $document, ?string $operationName = null) : ?OperationDefinitionNode
+    {
+        $operation = null;
+        foreach ($document->definitions->getIterator() as $node) {
+            if (! $node instanceof OperationDefinitionNode) {
+                continue;
+            }
+
+            if ($operationName === null) {
+                // We found a second operation, so we bail instead of returning an ambiguous result.
+                if ($operation !== null) {
+                    return null;
+                }
+                $operation = $node;
+            } elseif ($node->name instanceof NameNode && $node->name->value === $operationName) {
+                return $node;
+            }
+        }
+
+        return $operation;
+    }
 }
diff --git a/tests/Utils/AstGetOperationAstTest.php b/tests/Utils/AstGetOperationAstTest.php
new file mode 100644
index 00000000..247381d1
--- /dev/null
+++ b/tests/Utils/AstGetOperationAstTest.php
@@ -0,0 +1,108 @@
+<?php
+
+declare(strict_types=1);
+
+namespace GraphQL\Tests\Utils;
+
+use GraphQL\Language\Parser;
+use GraphQL\Utils\AST;
+use PHPUnit\Framework\TestCase;
+
+class AstGetOperationAstTest extends TestCase
+{
+    // Describe: getOperationAST
+
+    /**
+     * @see it('Gets an operation from a simple document')
+     */
+    public function testGetsAnOperationFromASimpleDocument() : void
+    {
+        $doc = Parser::parse('{ field }');
+        self::assertEquals(
+            AST::getOperationAST($doc),
+            $doc->definitions->offsetGet(0)
+        );
+    }
+
+    /**
+     * @see it('Gets an operation from a document with named op (mutation)')
+     */
+    public function testGetsAnOperationFromADcoumentWithNamedOpMutation() : void
+    {
+        $doc = Parser::parse('mutation Test { field }');
+        self::assertEquals(AST::getOperationAST($doc), $doc->definitions->offsetGet(0));
+    }
+
+    /**
+     * @see it('Gets an operation from a document with named op (subscription)')
+     */
+    public function testGetsAnOperationFromADcoumentWithNamedOpSubscription() : void
+    {
+        $doc = Parser::parse('subscription Test { field }');
+        self::assertEquals(AST::getOperationAST($doc), $doc->definitions->offsetGet(0));
+    }
+
+    /**
+     * @see it('Does not get missing operation')
+     */
+    public function testDoesNotGetMissingOperation() : void
+    {
+        $doc = Parser::parse('type Foo { field: String }');
+        self::assertEquals(AST::getOperationAST($doc), null);
+    }
+
+    /**
+     * @see it('Does not get ambiguous unnamed operation')
+     */
+    public function testDoesNotGetAmbiguousUnnamedOperation() : void
+    {
+        $doc = Parser::parse('
+          { field }
+          mutation Test { field }
+          subscription TestSub { field }
+        ');
+        self::assertEquals(AST::getOperationAST($doc), null);
+    }
+
+    /**
+     * @see it('Does not get ambiguous named operation')
+     */
+    public function testDoesNotGetAmbiguousNamedOperation() : void
+    {
+        $doc = Parser::parse('
+          query TestQ { field }
+          mutation TestM { field }
+          subscription TestS { field }
+        ');
+        self::assertEquals(AST::getOperationAST($doc), null);
+    }
+
+    /**
+     * @see it('Does not get misnamed operation')
+     */
+    public function testDoesNotGetMisnamedOperation() : void
+    {
+        $doc = Parser::parse('
+          { field }
+          query TestQ { field }
+          mutation TestM { field }
+          subscription TestS { field }
+        ');
+        self::assertEquals(AST::getOperationAST($doc, 'Unknown'), null);
+    }
+
+    /**
+     * @see it('Gets named operation')
+     */
+    public function testGetsNamedOperation() : void
+    {
+        $doc = Parser::parse('
+          query TestQ { field }
+          mutation TestM { field }
+          subscription TestS { field }
+        ');
+        self::assertEquals(AST::getOperationAST($doc, 'TestQ'), $doc->definitions->offsetGet(0));
+        self::assertEquals(AST::getOperationAST($doc, 'TestM'), $doc->definitions->offsetGet(1));
+        self::assertEquals(AST::getOperationAST($doc, 'TestS'), $doc->definitions->offsetGet(2));
+    }
+}
